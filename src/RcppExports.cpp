// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bvar_cpp
List bvar_cpp(const arma::mat Y, const arma::mat X, const int M, const int T, const int K, const int draws, const int burnin, const int intercept, const arma::vec priorIntercept, arma::mat PHI, arma::mat PHI0, const List priorPHI_in, const List priorL_in, arma::mat L, const bool SV, const arma::vec priorHomoscedastic, const List sv_spec, arma::mat h, arma::mat sv_para, const arma::imat i_mat, const arma::ivec i_vec, const bool progressbar);
RcppExport SEXP _bayesianVARs_bvar_cpp(SEXP YSEXP, SEXP XSEXP, SEXP MSEXP, SEXP TSEXP, SEXP KSEXP, SEXP drawsSEXP, SEXP burninSEXP, SEXP interceptSEXP, SEXP priorInterceptSEXP, SEXP PHISEXP, SEXP PHI0SEXP, SEXP priorPHI_inSEXP, SEXP priorL_inSEXP, SEXP LSEXP, SEXP SVSEXP, SEXP priorHomoscedasticSEXP, SEXP sv_specSEXP, SEXP hSEXP, SEXP sv_paraSEXP, SEXP i_matSEXP, SEXP i_vecSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const int >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type priorIntercept(priorInterceptSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PHI0(PHI0SEXP);
    Rcpp::traits::input_parameter< const List >::type priorPHI_in(priorPHI_inSEXP);
    Rcpp::traits::input_parameter< const List >::type priorL_in(priorL_inSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< const bool >::type SV(SVSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type priorHomoscedastic(priorHomoscedasticSEXP);
    Rcpp::traits::input_parameter< const List >::type sv_spec(sv_specSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sv_para(sv_paraSEXP);
    Rcpp::traits::input_parameter< const arma::imat >::type i_mat(i_matSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type i_vec(i_vecSEXP);
    Rcpp::traits::input_parameter< const bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(bvar_cpp(Y, X, M, T, K, draws, burnin, intercept, priorIntercept, PHI, PHI0, priorPHI_in, priorL_in, L, SV, priorHomoscedastic, sv_spec, h, sv_para, i_mat, i_vec, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// my_gig
NumericMatrix my_gig(int n, NumericVector lambda, NumericVector chi, NumericVector psi);
RcppExport SEXP _bayesianVARs_my_gig(SEXP nSEXP, SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(my_gig(n, lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// draw_PHI
arma::mat draw_PHI(arma::mat& PHI, arma::mat& PHI_prior, arma::mat& Y, arma::mat& X, arma::mat& L, arma::mat& d, arma::vec& V_i, int& K, int& M);
RcppExport SEXP _bayesianVARs_draw_PHI(SEXP PHISEXP, SEXP PHI_priorSEXP, SEXP YSEXP, SEXP XSEXP, SEXP LSEXP, SEXP dSEXP, SEXP V_iSEXP, SEXP KSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type PHI_prior(PHI_priorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type V_i(V_iSEXP);
    Rcpp::traits::input_parameter< int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_PHI(PHI, PHI_prior, Y, X, L, d, V_i, K, M));
    return rcpp_result_gen;
END_RCPP
}
// draw_L
arma::mat draw_L(arma::mat Ytilde, arma::vec& V_i, arma::mat& d);
RcppExport SEXP _bayesianVARs_draw_L(SEXP YtildeSEXP, SEXP V_iSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ytilde(YtildeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type V_i(V_iSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_L(Ytilde, V_i, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesianVARs_bvar_cpp", (DL_FUNC) &_bayesianVARs_bvar_cpp, 22},
    {"_bayesianVARs_my_gig", (DL_FUNC) &_bayesianVARs_my_gig, 4},
    {"_bayesianVARs_draw_PHI", (DL_FUNC) &_bayesianVARs_draw_PHI, 9},
    {"_bayesianVARs_draw_L", (DL_FUNC) &_bayesianVARs_draw_L, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesianVARs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
